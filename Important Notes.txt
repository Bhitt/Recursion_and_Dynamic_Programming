How to Approach Recursive Problems:
	Recursive solutions are built off of solutions to subproblems. Three of the most common approaches
	to develop an algorithm are bottom-up, top-down, and half-and-half.
Bottom-Up Approach:
	We start with knowing how to solve the problem for a simple case, like a list with only one element.
	Then we figure out how to solve the problem for two elements, then for three elements, and so on.
	The key here is to think about how you can build the solution for one case off of the previous
	case (or mulitple previous cases).
Top-Down Approach:
	In these problems, we think about how we can divide the problem for case N into subproblems. Be
	careful of overlap between the cases.
Half-and-Half Approach:
	It's often effective to divide the data set in half. For example, binary search works with a
	"half-and-half" approach. When we look for an element in a sorted array, we first figure out which
	half of the array contains the value. Then we recurse and search for it in that half. Merge sort
	is also a "half-and-half" approach. We sort each half of the array and then merge together the
	sorted halves.
Dynamic Programming and Memoization:
	Dynamic programming is mostly just a matter of taking a recursive algorithm and finding the
	overlapping subproblems (that is, the repeated calls). You then cache those results for later
	calls.
	Note: Some people call top-down dynamic programming "memoization" and only use "dynamic programming"
	to refer to bottom up-work.
Recursive Tip:
	Drawing the recursive calls as a tree is a great way to figure out the runtime of a recursive
	algorithm.
